import { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { portfolioService, type PortfolioMetrics, type TimeSeriesData, type DataQualityAlert, type LoanData } from "@/services/portfolioService";
import { platformRAGService } from "@/services/platform-rag-service";
import { AIInsightEngine, type AIInsight } from "@/services/ai-insight-engine";
import { EnhancedInsightCard } from "@/components/enhanced/EnhancedInsightCard";
import {
  TrendingUp,
  TrendingDown,
  DollarSign,
  Leaf,
  AlertTriangle,
  CheckCircle,
  BarChart3,
  PieChart,
  RefreshCw,
  Car,
  Target,
  Calendar,
  Building,
  Activity,
  Factory,
  Shield,
  Bot,
  Brain,
  Lightbulb,
  CreditCard
} from "lucide-react";
import {
  calculatePhysicalEmissionIntensity,
  calculateWACI,
  getPCAFMetricsCompliance
} from "@/lib/utils";
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart as RechartsPieChart,
  Cell
} from "recharts";
import { GlobalFilterBar } from "@/components/GlobalFilterBar";
import { InfoTooltip } from "@/components/shared/InfoTooltip";
import { AssumptionsNudge } from "@/components/assumptions/AssumptionsNudge";
import { useAssumptions } from "@/contexts/AssumptionsContext";

// Types are now imported from portfolioService

export function PortfolioOverviewDashboard() {
  const { toast } = useToast();
  const [metrics, setMetrics] = useState<PortfolioMetrics | null>(null);
  const [alerts, setAlerts] = useState<DataQualityAlert[]>([]);
  const [timeSeriesData, setTimeSeriesData] = useState<TimeSeriesData[]>([]);
  const [loans, setLoans] = useState<LoanData[]>([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [activeTab, setActiveTab] = useState("total");
  const [aiInsights, setAiInsights] = useState<AIInsight[]>([]);
  const [loadingInsights, setLoadingInsights] = useState(false);

  const [filters, setFilters] = useState<{ period: 'Q1' | 'Q2' | 'Q3' | 'Q4'; fuelType: string }>({ period: 'Q2', fuelType: 'all' });

  const displayedTimeSeries = useMemo(() => {
    let data = [...timeSeriesData];
    switch (filters.period) {
      case 'Q1':
        return data.slice(-3);
      case 'Q2':
        return data.slice(-6);
      case 'Q3':
        return data.slice(-9);
      case 'Q4':
        return data.slice(-12);
      default:
        return data;
    }
  }, [timeSeriesData, filters.period]);

useEffect(() => {
  calculateMetrics();
  // eslint-disable-next-line react-hooks/exhaustive-deps
}, []);
const { assumptions } = useAssumptions();

  const calculateMetrics = async () => {
    try {
      setLoading(true);
      
      // Fetch portfolio analytics from backend
      const portfolioMetrics = await portfolioService.getPortfolioAnalytics();
      const { loans: portfolioLoans } = await portfolioService.getPortfolioSummary();
      
      if (portfolioLoans.length === 0) {
        setMetrics(null);
        setAlerts([]);
        setLoans([]);
        setLoading(false);
        return;
      }

      setMetrics(portfolioMetrics);
      setLoans(portfolioLoans);

      // Load historical data for timeline
      await loadTimeSeriesData();
      
      // Generate data quality alerts
      const dataQualityAlerts = portfolioService.generateDataQualityAlerts(portfolioLoans, portfolioMetrics);
      setAlerts(dataQualityAlerts);
      
      // Generate AI insights using AIInsightEngine
      const insights = AIInsightEngine.generateInsights(portfolioLoans as any);
      setAiInsights(insights);
      
      setLastUpdated(new Date());

    } catch (error) {
      console.error('Failed to calculate metrics:', error);
      toast({
        title: "Calculation Error",
        description: "Failed to calculate portfolio metrics.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const loadTimeSeriesData = async () => {
    try {
      const historicalData = await portfolioService.getHistoricalAnalytics();
      setTimeSeriesData(historicalData);
    } catch (error) {
      console.error('Failed to load time series data:', error);
    }
  };

  // Data quality alerts are now generated by the portfolio service

  const getInsightIcon = (category: string) => {
    switch (category) {
      case 'data-quality':
        return <CreditCard className="h-5 w-5" />;
      case 'emission-reduction':
        return <Leaf className="h-5 w-5" />;
      case 'business-intelligence':
        return <Brain className="h-5 w-5" />;
      case 'regulatory-compliance':
        return <Shield className="h-5 w-5" />;
      case 'risk-assessment':
        return <AlertTriangle className="h-5 w-5" />;
      default:
        return <Lightbulb className="h-5 w-5" />;
    }
  };

  const getInsightVariant = (category: string) => {
    switch (category) {
      case 'data-quality':
        return 'info' as const;
      case 'emission-reduction':
        return 'success' as const;
      case 'business-intelligence':
        return 'opportunity' as const;
      case 'regulatory-compliance':
        return 'warning' as const;
      case 'risk-assessment':
        return 'warning' as const;
      default:
        return 'default' as const;
    }
  };

  const handleInsightAction = (insight: AIInsight) => {
    // Handle insight actions - navigate to relevant sections or trigger workflows
    console.log('Taking action on insight:', insight.title);
    toast({
      title: "Action Initiated",
      description: `Taking action on: ${insight.title}`,
    });
  };

  // Remove the old generateAIInsights function - now using AIInsightEngine directly

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

const getDataQualityColor = (score: number) => {
  if (score <= 2) return 'text-green-600';
  if (score <= 3) return 'text-blue-600';
  if (score <= 4) return 'text-yellow-600';
  return 'text-red-600';
};

  if (loading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-center h-32">
            <RefreshCw className="h-6 w-6 animate-spin text-primary" />
            <span className="ml-2">Calculating portfolio metrics...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!metrics) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center py-12">
            <Car className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium">No Portfolio Data</h3>
            <p className="text-muted-foreground">
              Upload loan data to view portfolio metrics and PCAF compliance status
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        {lastUpdated && (
          <p className="text-sm text-muted-foreground">
            Last updated: {lastUpdated.toLocaleString()}
          </p>
        )}
        <Button onClick={async () => {
          await portfolioService.refreshPortfolioData();
          await calculateMetrics();
        }} variant="outline" size="sm">
          <RefreshCw className="h-4 w-4 mr-2" />
          Refresh
        </Button>
      </div>

      {/* AI Insights Section */}
      {aiInsights.length > 0 && (
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            <h3 className="text-lg font-semibold">AI Portfolio Insights</h3>
            <Badge variant="outline" className="ml-2">
              {aiInsights.length} insights
            </Badge>
          </div>
          <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
            {aiInsights.slice(0, 6).map((insight, index) => (
              <EnhancedInsightCard
                key={insight.id}
                title={insight.title}
                icon={getInsightIcon(insight.category)}
                items={insight.items}
                variant={getInsightVariant(insight.category)}
                confidence={insight.confidence}
                priority={insight.priority}
                actionable={insight.actionable}
                onActionClick={() => handleInsightAction(insight)}
              />
            ))}
          </div>
        </div>
      )}

<AssumptionsNudge />

      <GlobalFilterBar 
        fuelTypes={Object.keys(metrics.emissionsByFuelType)}
        selectedFuelType={filters.fuelType}
        period={filters.period}
        onChange={(f) => setFilters(f)}
      />

      {/* Main Tabs */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="overview">Portfolio Overview</TabsTrigger>
          <TabsTrigger value="pcaf-metrics">PCAF Metrics</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          
          {/* AI Insights Card */}
          {(aiInsights || loadingInsights) && (
            <Card className="border-primary/20 bg-primary/5">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bot className="h-5 w-5 text-primary" />
                  AI Portfolio Insights
                  <Badge variant="secondary" className="ml-auto">
                    Platform RAG
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {loadingInsights ? (
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Brain className="h-4 w-4 animate-pulse" />
                    Analyzing portfolio performance...
                  </div>
                ) : (
                  <div className="prose prose-sm max-w-none">
                  <div className="text-sm text-muted-foreground">
                    No AI insights available yet. Load portfolio data to generate insights.
                  </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

      {/* Key Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
        <Card className="floating-card stagger-fade-in stagger-1">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Loans</CardTitle>
            <Car className="h-4 w-4 text-muted-foreground hover-scale" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold metric-value-animate">{metrics.totalLoans}</div>
            <p className="text-xs text-muted-foreground">
              {formatCurrency(metrics.totalLoanValue)} total value
            </p>
          </CardContent>
        </Card>

        <Card className="floating-card stagger-fade-in stagger-2">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Outstanding Balance</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground hover-scale" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold metric-value-animate">{formatCurrency(metrics.totalOutstandingBalance)}</div>
            <p className="text-xs text-muted-foreground">
              {((metrics.totalOutstandingBalance / metrics.totalLoanValue) * 100).toFixed(1)}% of total value
            </p>
          </CardContent>
        </Card>

        <Card className="floating-card stagger-fade-in stagger-3">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Financed Emissions</CardTitle>
            <Leaf className="h-4 w-4 text-muted-foreground hover-scale" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-primary metric-value-animate">{metrics.totalFinancedEmissions.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">
              tCO₂e (PCAF Category 15)
            </p>
          </CardContent>
        </Card>

        <Card className="floating-card stagger-fade-in stagger-4">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-1">Emissions Intensity <InfoTooltip content="Economic intensity: kg CO₂e per $1,000 outstanding. Lower is better; target ≤ 2.5 kg/$1k." href="https://pcafglobal.org/standard" ariaLabel="What is Emissions Intensity?" /></CardTitle>
            <Target className="h-4 w-4 text-muted-foreground hover-scale" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-primary metric-value-animate">{metrics.emissionIntensityPerDollar.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">
              kg CO₂e / $1,000 loaned
            </p>
            <div className="mt-2 flex items-center text-xs">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-1 hover-glow" />
              <span className="text-muted-foreground">Target: &lt;2.5 kg/$1k</span>
            </div>
          </CardContent>
        </Card>

        <Card className="floating-card stagger-fade-in stagger-5">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-1">PCAF Box 8 WDQS <InfoTooltip content="Loan‑weighted data quality score (1=best, 5=worst) per PCAF Box 8. Recommended portfolio target ≤ 3.0." href="https://pcafglobal.org/standard" ariaLabel="What is PCAF Box 8 WDQS?" /></CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground hover-scale" />
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold metric-value-animate ${getDataQualityColor(metrics.weightedAvgDataQuality)}`}>
              {metrics.weightedAvgDataQuality.toFixed(2)}
            </div>
            <p className="text-xs text-muted-foreground">
              Loan-weighted • Target: ≤3.0
            </p>
            <div className="mt-1 text-xs">
              {metrics.weightedAvgDataQuality <= 3.0 ? (
                <span className="text-green-600 badge-enhanced">✓ PCAF Compliant</span>
              ) : (
                <span className="text-red-600 badge-enhanced">⚠ Above threshold</span>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Portfolio Emissions Timeline */}
      <Card className="card-enhanced stagger-fade-in stagger-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-primary hover-scale" />
            Portfolio Emissions Over Time
          </CardTitle>
          <CardDescription>
            Track emissions trends and lending patterns across portfolio
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="total" className="hover-glow">Total Emissions</TabsTrigger>
              <TabsTrigger value="intensity" className="hover-glow">Emissions Intensity</TabsTrigger>
              <TabsTrigger value="quality" className="hover-glow">Data Quality Trend</TabsTrigger>
            </TabsList>
            
            <div className="mt-6 chart-container">
              {timeSeriesData.length > 0 ? (
                <>
                  {activeTab === "total" && (
                    <ResponsiveContainer width="100%" height={300}>
                      <AreaChart data={displayedTimeSeries}>
                        <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                        <XAxis dataKey="date" className="text-sm" />
                        <YAxis className="text-sm" />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'hsl(var(--background))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '6px'
                          }}
                          formatter={(value: number) => [`${value.toFixed(2)} tCO₂e`, 'Total Emissions']}
                        />
                        <Area 
                          type="monotone" 
                          dataKey="totalEmissions" 
                          stroke="hsl(var(--primary))" 
                          fill="hsl(var(--primary))" 
                          fillOpacity={0.2}
                        />
                      </AreaChart>
                    </ResponsiveContainer>
                  )}
                  
                  {activeTab === "intensity" && (
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={displayedTimeSeries}>
                        <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                        <XAxis dataKey="date" className="text-sm" />
                        <YAxis className="text-sm" />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'hsl(var(--background))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '6px'
                          }}
                          formatter={(value: number) => [`${value.toFixed(2)} kg/$1k`, 'Emissions Intensity']}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="emissionIntensity" 
                          stroke="hsl(var(--primary))" 
                          strokeWidth={2}
                          dot={{ fill: "hsl(var(--primary))", strokeWidth: 2 }}
                        />
                        {/* Target line at 2.5 kg/$1k */}
                        <Line 
                          type="monotone" 
                          dataKey={() => 2.5} 
                          stroke="hsl(var(--destructive))" 
                          strokeWidth={1}
                          strokeDasharray="5 5"
                          dot={false}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  )}

                  {activeTab === "quality" && (
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={timeSeriesData}>
                        <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                        <XAxis dataKey="date" className="text-sm" />
                        <YAxis domain={[1, 5]} className="text-sm" />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'hsl(var(--background))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '6px'
                          }}
                          formatter={(value: number) => [`${value.toFixed(1)}`, 'Avg Data Quality']}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="avgDataQuality" 
                          stroke="hsl(var(--chart-1))" 
                          strokeWidth={2}
                          dot={{ fill: "hsl(var(--chart-1))", strokeWidth: 2 }}
                        />
                        {/* PCAF compliance line at 3.0 */}
                        <Line 
                          type="monotone" 
                          dataKey={() => 3.0} 
                          stroke="hsl(var(--destructive))" 
                          strokeWidth={1}
                          strokeDasharray="5 5"
                          dot={false}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  )}
                 </>
              ) : (
                <div className="h-[300px] flex items-center justify-center text-muted-foreground">
                  <div className="text-center">
                    <BarChart3 className="h-12 w-12 mx-auto mb-2 opacity-50" />
                    <p>No historical data available</p>
                    <p className="text-sm">Charts will populate as more data is collected</p>
                  </div>
                </div>
              )}
            </div>
          </Tabs>
        </CardContent>
      </Card>

      {/* Enhanced Data Quality Alerts */}
      {alerts.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-4 w-4 text-primary" />
              Compliance Overview
            </CardTitle>
            <CardDescription>
              Data quality insights and recommendations for portfolio improvement
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {alerts.map((alert, index) => {
              const getAlertStyles = (type: string) => {
                switch (type) {
                  case 'error':
                    return {
                      border: 'border-l-4 border-l-destructive/60',
                      background: 'bg-destructive/5',
                      icon: 'text-destructive',
                      badge: 'bg-destructive/10 text-destructive border-destructive/20'
                    };
                  case 'warning':
                    return {
                      border: 'border-l-4 border-l-warning/60',
                      background: 'bg-warning/5',
                      icon: 'text-warning',
                      badge: 'bg-warning/10 text-warning border-warning/20'
                    };
                  case 'info':
                    return {
                      border: 'border-l-4 border-l-info/60',
                      background: 'bg-info/5',
                      icon: 'text-info',
                      badge: 'bg-info/10 text-info border-info/20'
                    };
                  default:
                    return {
                      border: 'border-l-4 border-l-muted-foreground/60',
                      background: 'bg-muted/30',
                      icon: 'text-muted-foreground',
                      badge: 'bg-muted text-muted-foreground'
                    };
                }
              };

              const styles = getAlertStyles(alert.type);
              const Icon = alert.type === 'error' || alert.type === 'warning' ? AlertTriangle : CheckCircle;

              return (
                <div 
                  key={index}
                  className={`${styles.border} ${styles.background} rounded-lg p-4 transition-all duration-200 hover:shadow-md`}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-start space-x-3">
                      <Icon className={`w-5 h-5 mt-0.5 ${styles.icon}`} />
                      <div className="space-y-1">
                        <h3 className="font-semibold text-foreground leading-tight">
                          {alert.title}
                        </h3>
                        <p className="text-sm text-muted-foreground">
                          {alert.message}
                        </p>
                      </div>
                    </div>
                    <Badge variant="outline" className={`${styles.badge} text-xs font-medium`}>
                      {alert.type === 'error' ? 'High Priority' : alert.type === 'warning' ? 'Medium Priority' : 'Low Priority'}
                    </Badge>
                  </div>
                  
                  <Alert className="border-0 bg-primary/10 p-3 mt-3">
                    <AlertDescription className="text-sm">
                      <span className="font-medium text-primary">Recommendation:</span>
                      <span className="ml-2 text-foreground">{alert.recommendation}</span>
                    </AlertDescription>
                  </Alert>
                </div>
              );
            })}
          </CardContent>
        </Card>
      )}

      {/* Enhanced Breakdown Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Enhanced Fuel Type Breakdown */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PieChart className="h-4 w-4 text-primary" />
              Emissions by Fuel Type
            </CardTitle>
            <CardDescription>Track portfolio transition to low-emission vehicles</CardDescription>
          </CardHeader>
          <CardContent>
            {Object.keys(metrics.emissionsByFuelType).length > 0 ? (
              <div className="space-y-4">
                {Object.entries(metrics.emissionsByFuelType)
                  .filter(([ft]) => filters.fuelType === 'all' || ft === filters.fuelType)
                  .sort(([,a], [,b]) => b - a)
                  .map(([fuelType, emissions]) => {
                    const percentage = (emissions / metrics.totalFinancedEmissions) * 100;
                    const loanCount = Object.values(metrics.emissionsByFuelType).length;
                    
                    const fuelTypeColors: Record<string, string> = {
                      'gasoline': 'bg-red-500',
                      'diesel': 'bg-orange-500', 
                      'electric': 'bg-green-500',
                      'hybrid': 'bg-blue-500',
                      'unknown': 'bg-gray-500'
                    };
                    
                    const fuelTypeLabels: Record<string, string> = {
                      'gasoline': 'Gasoline',
                      'diesel': 'Diesel',
                      'electric': 'Electric', 
                      'hybrid': 'Hybrid',
                      'unknown': 'Unknown'
                    };

                    return (
                      <div key={fuelType} className="space-y-2">
                        <div className="flex justify-between items-center">
                          <div className="flex items-center gap-2">
                            <div className={`w-3 h-3 rounded-full ${fuelTypeColors[fuelType] || 'bg-gray-500'}`} />
                            <span className="text-sm font-medium">
                              {fuelTypeLabels[fuelType] || fuelType}
                            </span>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium">{emissions.toFixed(2)} tCO₂e</div>
                            <div className="text-xs text-muted-foreground">{percentage.toFixed(1)}%</div>
                          </div>
                        </div>
                        <Progress value={percentage} className="h-2" />
                      </div>
                    );
                  })}
                
                {/* Transition Tracking Summary */}
                <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                  <div className="text-sm font-medium mb-2">Transition Progress</div>
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <span className="text-muted-foreground">High-Carbon:</span>
                      <div className="font-medium">
                        {(((metrics.emissionsByFuelType['gasoline'] || 0) + 
                           (metrics.emissionsByFuelType['diesel'] || 0)) / 
                           metrics.totalFinancedEmissions * 100).toFixed(1)}%
                      </div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Low-Carbon:</span>
                      <div className="font-medium text-green-600">
                        {(((metrics.emissionsByFuelType['electric'] || 0) + 
                           (metrics.emissionsByFuelType['hybrid'] || 0)) / 
                           metrics.totalFinancedEmissions * 100).toFixed(1)}%
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-6 text-muted-foreground">
                No fuel type data available
              </div>
            )}
          </CardContent>
        </Card>

        {/* Data Quality Distribution */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4 text-primary" />
              Data Quality Distribution
            </CardTitle>
            <CardDescription>Number of loans by PCAF quality level</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {Object.entries(metrics.loansByDataQuality)
                .filter(([,count]) => count > 0)
                .map(([level, count]) => {
                  const percentage = (count / metrics.totalLoans) * 100;
                  const qualityLabels = {
                    '1': 'Excellent',
                    '2': 'Good', 
                    '3': 'Fair',
                    '4': 'Poor',
                    '5': 'Very Poor'
                  };
                  return (
                    <div key={level} className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span>Level {level} - {qualityLabels[level as keyof typeof qualityLabels]}</span>
                        <span>{count} loans ({percentage.toFixed(1)}%)</span>
                      </div>
                      <Progress value={percentage} className="h-2" />
                    </div>
                  );
                })}
            </div>
            
            <div className="mt-6 pt-4 border-t border-border space-y-4">
              {/* Current PCAF Asset Class */}
              <div className="flex items-center gap-2 text-sm">
                <Car className="h-4 w-4 text-primary" />
                <div>
                  <div className="font-medium text-foreground">Current PCAF Asset Class</div>
                  <div className="text-muted-foreground">Motor Vehicle Loans (PCAF Asset Class 15)</div>
                </div>
              </div>
              
              {/* Coming Next */}
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Building className="h-4 w-4" />
                <div>
                  <div className="font-medium mb-1">Coming Next</div>
                  <div>Real Estate Mortgages (PCAF Asset Class 2)</div>
                  <div className="text-xs">Expected Release: Q2 2026</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Additional Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Average Attribution Factor</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{(metrics.avgAttributionFactor * 100).toFixed(1)}%</div>
            <p className="text-xs text-muted-foreground mt-1">
              Outstanding balance to vehicle value ratio
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Emission Intensity</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{metrics.emissionIntensityPerDollar.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground mt-1">
              kg CO₂e per $ outstanding balance
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Risk Assessment</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>High Risk Loans:</span>
                <span className="font-medium">{metrics.highRiskLoans}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>PCAF Compliant:</span>
                <span className="font-medium text-green-600">{metrics.pcafCompliantLoans}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
        </TabsContent>

        <TabsContent value="pcaf-metrics" className="space-y-6">
          {/* PCAF Metrics Overview */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Absolute Emissions */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-1">Absolute Emissions <InfoTooltip content="Total financed greenhouse gas emissions attributed to your lending (tCO₂e)." href="https://pcafglobal.org/standard" ariaLabel="What are Absolute Emissions?" /></CardTitle>
                <Leaf className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-primary">{metrics.totalFinancedEmissions.toFixed(2)}</div>
                <p className="text-xs text-muted-foreground">tCO₂e</p>
                <div className="mt-2 flex items-center text-xs">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-1" />
                  <span className="text-green-600">Baseline established</span>
                </div>
              </CardContent>
            </Card>

            {/* Economic Emission Intensity */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-1">Economic Intensity <InfoTooltip content="Emissions per $1,000 outstanding (kg CO₂e/$1k). Lower is better; aligns with portfolio efficiency." href="https://pcafglobal.org/standard" ariaLabel="What is Economic Intensity?" /></CardTitle>
                <DollarSign className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className={`text-2xl font-bold ${metrics.emissionIntensityPerDollar <= 2.5 ? 'text-green-600' : metrics.emissionIntensityPerDollar <= 5.0 ? 'text-blue-600' : 'text-red-600'}`}>
                  {metrics.emissionIntensityPerDollar.toFixed(2)}
                </div>
                <p className="text-xs text-muted-foreground">kg CO₂e/$1,000</p>
                <div className="mt-2 flex items-center text-xs">
                  <div className={`w-2 h-2 rounded-full mr-1 ${metrics.emissionIntensityPerDollar <= 2.5 ? 'bg-green-500' : metrics.emissionIntensityPerDollar <= 5.0 ? 'bg-blue-500' : 'bg-red-500'}`} />
                  <span className={metrics.emissionIntensityPerDollar <= 2.5 ? 'text-green-600' : metrics.emissionIntensityPerDollar <= 5.0 ? 'text-blue-600' : 'text-red-600'}>
                    {metrics.emissionIntensityPerDollar <= 2.5 ? 'Excellent' : metrics.emissionIntensityPerDollar <= 5.0 ? 'Good' : 'Above benchmarks'}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Physical Emission Intensity */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-1">Physical Intensity <InfoTooltip content="Physical intensity: emissions per unit of activity (e.g., tCO₂e per vehicle financed). Lower is better." href="https://pcafglobal.org/standard" ariaLabel="What is Physical Intensity?" /></CardTitle>
                <Activity className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className={`text-2xl font-bold ${metrics.physicalEmissionIntensity <= 3.0 ? 'text-green-600' : metrics.physicalEmissionIntensity <= 5.0 ? 'text-blue-600' : 'text-red-600'}`}>
                  {metrics.physicalEmissionIntensity.toFixed(2)}
                </div>
                <p className="text-xs text-muted-foreground">tCO₂e/vehicle</p>
                <div className="mt-2 flex items-center text-xs">
                  <div className={`w-2 h-2 rounded-full mr-1 ${metrics.physicalEmissionIntensity <= 3.0 ? 'bg-green-500' : metrics.physicalEmissionIntensity <= 5.0 ? 'bg-blue-500' : 'bg-red-500'}`} />
                  <span className={metrics.physicalEmissionIntensity <= 3.0 ? 'text-green-600' : metrics.physicalEmissionIntensity <= 5.0 ? 'text-blue-600' : 'text-red-600'}>
                    {metrics.physicalEmissionIntensity <= 3.0 ? 'Efficient' : metrics.physicalEmissionIntensity <= 5.0 ? 'Acceptable' : 'High emissions'}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* WACI */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-1">WACI <InfoTooltip content="Weighted Average Carbon Intensity: borrower emissions per $M revenue (tCO₂e/$M), weighted by portfolio exposure." href="https://pcafglobal.org/standard" ariaLabel="What is WACI?" /></CardTitle>
                <Factory className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className={`text-2xl font-bold ${metrics.waci <= 200 ? 'text-green-600' : metrics.waci <= 400 ? 'text-blue-600' : 'text-red-600'}`}>
                  {metrics.waci.toFixed(0)}
                </div>
                <p className="text-xs text-muted-foreground">tCO₂e/$M revenue</p>
                <div className="mt-2 flex items-center text-xs">
                  <div className={`w-2 h-2 rounded-full mr-1 ${metrics.waci <= 200 ? 'bg-green-500' : metrics.waci <= 400 ? 'bg-blue-500' : 'bg-red-500'}`} />
                  <span className={metrics.waci <= 200 ? 'text-green-600' : metrics.waci <= 400 ? 'text-blue-600' : 'text-red-600'}>
                    {metrics.waci <= 200 ? 'Low exposure' : metrics.waci <= 400 ? 'Moderate' : 'High exposure'}
                  </span>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* PCAF Metrics Comparison Chart */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-4 w-4 text-primary" />
                PCAF Metrics Comparison
              </CardTitle>
              <CardDescription>
                Compare economic vs physical intensity trends and PCAF compliance status
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Metrics Comparison */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <h4 className="text-sm font-medium">Economic vs Physical Intensity</h4>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Economic Intensity</span>
                        <div className="flex items-center gap-2">
                          <Progress value={Math.min((metrics.emissionIntensityPerDollar / 10) * 100, 100)} className="w-20 h-2" />
                          <span className="text-sm font-medium">{metrics.emissionIntensityPerDollar.toFixed(2)}</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm">Physical Intensity</span>
                        <div className="flex items-center gap-2">
                          <Progress value={Math.min((metrics.physicalEmissionIntensity / 10) * 100, 100)} className="w-20 h-2" />
                          <span className="text-sm font-medium">{metrics.physicalEmissionIntensity.toFixed(2)}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="text-sm font-medium">PCAF Compliance Status</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="p-3 bg-muted/50 rounded-lg">
                        <div className="text-sm font-medium">WDQS Score</div>
                        <div className={`text-lg font-bold ${getDataQualityColor(metrics.weightedAvgDataQuality)}`}>
                          {metrics.weightedAvgDataQuality.toFixed(2)}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {metrics.weightedAvgDataQuality <= 3.0 ? '✓ Compliant' : '⚠ Above threshold'}
                        </div>
                      </div>
                      <div className="p-3 bg-muted/50 rounded-lg">
                        <div className="text-sm font-medium">Coverage</div>
                        <div className="text-lg font-bold text-primary">
                          {((metrics.pcafCompliantLoans / metrics.totalLoans) * 100).toFixed(0)}%
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {metrics.pcafCompliantLoans} of {metrics.totalLoans} loans
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Trend Analysis Chart */}
                {timeSeriesData.length > 0 && (
                  <div className="space-y-4">
                    <h4 className="text-sm font-medium">PCAF Metrics Trends</h4>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={timeSeriesData}>
                        <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                        <XAxis dataKey="date" className="text-sm" />
                        <YAxis className="text-sm" />
                        <Tooltip 
                          contentStyle={{ 
                            backgroundColor: 'hsl(var(--background))',
                            border: '1px solid hsl(var(--border))',
                            borderRadius: '6px'
                          }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="emissionIntensity" 
                          stroke="hsl(var(--primary))" 
                          strokeWidth={2}
                          name="Economic Intensity"
                          dot={{ fill: "hsl(var(--primary))", strokeWidth: 2 }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="avgDataQuality" 
                          stroke="hsl(var(--chart-1))" 
                          strokeWidth={2}
                          name="WDQS Score"
                          dot={{ fill: "hsl(var(--chart-1))", strokeWidth: 2 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* PCAF Compliance Indicators */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-4 w-4 text-primary" />
                PCAF Compliance Dashboard
              </CardTitle>
              <CardDescription>
                Monitor compliance status across all 4 PCAF metrics with recommendations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Overall Compliance Status */}
                <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
                  <div>
                    <h4 className="text-lg font-medium">Overall PCAF Compliance</h4>
                    <p className="text-sm text-muted-foreground">
                      Based on WDQS score and metric performance
                    </p>
                  </div>
                  <div className="text-right">
                    <div className={`text-2xl font-bold ${metrics.weightedAvgDataQuality <= 3.0 && metrics.emissionIntensityPerDollar <= 5.0 ? 'text-green-600' : 'text-yellow-600'}`}>
                      {metrics.weightedAvgDataQuality <= 3.0 && metrics.emissionIntensityPerDollar <= 5.0 ? 'COMPLIANT' : 'ATTENTION NEEDED'}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {metrics.pcafCompliantLoans} of {metrics.totalLoans} loans meeting standards
                    </p>
                  </div>
                </div>

                {/* Individual Metric Compliance */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium">Data Quality Metrics</h4>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between p-3 bg-muted/30 rounded">
                        <span className="text-sm">WDQS Score</span>
                        <div className="flex items-center gap-2">
                          <Badge variant={metrics.weightedAvgDataQuality <= 3.0 ? "default" : "destructive"}>
                            {metrics.weightedAvgDataQuality <= 3.0 ? "PASS" : "FAIL"}
                          </Badge>
                          <span className="text-sm font-medium">{metrics.weightedAvgDataQuality.toFixed(2)}</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-muted/30 rounded">
                        <span className="text-sm">Data Coverage</span>
                        <div className="flex items-center gap-2">
                          <Badge variant={metrics.pcafCompliantLoans / metrics.totalLoans >= 0.8 ? "default" : "secondary"}>
                            {metrics.pcafCompliantLoans / metrics.totalLoans >= 0.8 ? "GOOD" : "IMPROVING"}
                          </Badge>
                          <span className="text-sm font-medium">{((metrics.pcafCompliantLoans / metrics.totalLoans) * 100).toFixed(0)}%</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h4 className="text-sm font-medium">Emission Metrics</h4>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between p-3 bg-muted/30 rounded">
                        <span className="text-sm">Economic Efficiency</span>
                        <div className="flex items-center gap-2">
                          <Badge variant={metrics.emissionIntensityPerDollar <= 2.5 ? "default" : metrics.emissionIntensityPerDollar <= 5.0 ? "secondary" : "destructive"}>
                            {metrics.emissionIntensityPerDollar <= 2.5 ? "EXCELLENT" : metrics.emissionIntensityPerDollar <= 5.0 ? "GOOD" : "HIGH"}
                          </Badge>
                          <span className="text-sm font-medium">{metrics.emissionIntensityPerDollar.toFixed(2)}</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-muted/30 rounded">
                        <span className="text-sm">Physical Efficiency</span>
                        <div className="flex items-center gap-2">
                          <Badge variant={metrics.physicalEmissionIntensity <= 3.0 ? "default" : metrics.physicalEmissionIntensity <= 5.0 ? "secondary" : "destructive"}>
                            {metrics.physicalEmissionIntensity <= 3.0 ? "EFFICIENT" : metrics.physicalEmissionIntensity <= 5.0 ? "MODERATE" : "INEFFICIENT"}
                          </Badge>
                          <span className="text-sm font-medium">{metrics.physicalEmissionIntensity.toFixed(2)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Recommendations */}
                <div className="space-y-3">
                  <h4 className="text-sm font-medium">Improvement Recommendations</h4>
                  <div className="space-y-2">
                    {metrics.weightedAvgDataQuality > 3.0 && (
                      <Alert>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <strong>WDQS Improvement:</strong> Enhance data collection to achieve PCAF Box 8 compliance (target ≤3.0)
                        </AlertDescription>
                      </Alert>
                    )}
                    {metrics.emissionIntensityPerDollar > 5.0 && (
                      <Alert>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <strong>Economic Intensity:</strong> Focus lending on lower-emission vehicles to improve portfolio efficiency
                        </AlertDescription>
                      </Alert>
                    )}
                    {metrics.physicalEmissionIntensity > 5.0 && (
                      <Alert>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <strong>Physical Intensity:</strong> Promote electric and hybrid vehicle financing to reduce per-vehicle emissions
                        </AlertDescription>
                      </Alert>
                    )}
                    {metrics.waci > 400 && (
                      <Alert>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <strong>WACI Exposure:</strong> Consider exposure limits to high-carbon-intensity borrowers
                        </AlertDescription>
                      </Alert>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}